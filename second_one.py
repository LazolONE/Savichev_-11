# -*- coding: utf-8 -*-
"""second_one.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k0i78yw3QuqQRX5gxAb9wf8mtq7t_YqT
"""

import math

class TFIDFCalculator:
    stop_words = {
        'the', 'and', 'is', 'it', 'of', 'to', 'a', 'in', 'that', 'for',
        'on', 'with', 'as', 'by', 'at', 'an', 'be', 'are', 'or', 'was',
        'this', 'they', 'we', 'he', 'she', 'his', 'her', 'their', 'our',
        'my', 'from', 'you', 'not', 'but', 'has', 'have', 'had', 'at',
        'not', 'so', 'if', 'what', 'which', 'when', 'where', 'why', 'how'
    }

    def __init__(self, documents):

        if not all(len(doc.split()) >= 2 for doc in documents):
            raise ValueError("Должны быть минимум 2 слова.")
        self.documents = documents
    def get_tf(self, word, doc_num, ignore_stopwords=True):
        doc_words = self.documents[doc_num].split()
        word = word.lower()
        if ignore_stopwords:
            doc_words = [w for w in doc_words if w.lower() not in self.stop_words]
        total_words = len(doc_words)
        word_count = doc_words.count(word)
        return word_count / total_words if total_words > 0 else 0
    def get_idf(self, word, ignore_stopwords=True):
        word = word.lower()
        total_docs = len(self.documents)
        docs_containing_word = 0

        for doc in self.documents:
            words = doc.split()

            if ignore_stopwords:
                words = [w for w in words if w.lower() not in self.stop_words]

            if word in [w.lower() for w in words]:
                docs_containing_word += 1
        return math.log((total_docs + 1) / (docs_containing_word + 1)) + 1

    def get_tf_idf(self, word, doc_num, ignore_stopwords=True):
        tf = self.get_tf(word, doc_num, ignore_stopwords)
        idf = self.get_idf(word, ignore_stopwords)
        return tf * idf